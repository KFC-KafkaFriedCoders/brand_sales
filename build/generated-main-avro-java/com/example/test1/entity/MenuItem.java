/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example.test1.entity;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class MenuItem extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4830272670853492232L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MenuItem\",\"namespace\":\"com.example.test1.entity\",\"fields\":[{\"name\":\"menu_id\",\"type\":\"int\"},{\"name\":\"menu_name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"unit_price\",\"type\":\"int\"},{\"name\":\"quantity\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MenuItem> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MenuItem> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<MenuItem> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<MenuItem> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<MenuItem> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this MenuItem to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a MenuItem from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a MenuItem instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static MenuItem fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private int menu_id;
  private java.lang.String menu_name;
  private int unit_price;
  private int quantity;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MenuItem() {}

  /**
   * All-args constructor.
   * @param menu_id The new value for menu_id
   * @param menu_name The new value for menu_name
   * @param unit_price The new value for unit_price
   * @param quantity The new value for quantity
   */
  public MenuItem(java.lang.Integer menu_id, java.lang.String menu_name, java.lang.Integer unit_price, java.lang.Integer quantity) {
    this.menu_id = menu_id;
    this.menu_name = menu_name;
    this.unit_price = unit_price;
    this.quantity = quantity;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return menu_id;
    case 1: return menu_name;
    case 2: return unit_price;
    case 3: return quantity;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: menu_id = (java.lang.Integer)value$; break;
    case 1: menu_name = value$ != null ? value$.toString() : null; break;
    case 2: unit_price = (java.lang.Integer)value$; break;
    case 3: quantity = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'menu_id' field.
   * @return The value of the 'menu_id' field.
   */
  public int getMenuId() {
    return menu_id;
  }


  /**
   * Sets the value of the 'menu_id' field.
   * @param value the value to set.
   */
  public void setMenuId(int value) {
    this.menu_id = value;
  }

  /**
   * Gets the value of the 'menu_name' field.
   * @return The value of the 'menu_name' field.
   */
  public java.lang.String getMenuName() {
    return menu_name;
  }


  /**
   * Sets the value of the 'menu_name' field.
   * @param value the value to set.
   */
  public void setMenuName(java.lang.String value) {
    this.menu_name = value;
  }

  /**
   * Gets the value of the 'unit_price' field.
   * @return The value of the 'unit_price' field.
   */
  public int getUnitPrice() {
    return unit_price;
  }


  /**
   * Sets the value of the 'unit_price' field.
   * @param value the value to set.
   */
  public void setUnitPrice(int value) {
    this.unit_price = value;
  }

  /**
   * Gets the value of the 'quantity' field.
   * @return The value of the 'quantity' field.
   */
  public int getQuantity() {
    return quantity;
  }


  /**
   * Sets the value of the 'quantity' field.
   * @param value the value to set.
   */
  public void setQuantity(int value) {
    this.quantity = value;
  }

  /**
   * Creates a new MenuItem RecordBuilder.
   * @return A new MenuItem RecordBuilder
   */
  public static com.example.test1.entity.MenuItem.Builder newBuilder() {
    return new com.example.test1.entity.MenuItem.Builder();
  }

  /**
   * Creates a new MenuItem RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MenuItem RecordBuilder
   */
  public static com.example.test1.entity.MenuItem.Builder newBuilder(com.example.test1.entity.MenuItem.Builder other) {
    if (other == null) {
      return new com.example.test1.entity.MenuItem.Builder();
    } else {
      return new com.example.test1.entity.MenuItem.Builder(other);
    }
  }

  /**
   * Creates a new MenuItem RecordBuilder by copying an existing MenuItem instance.
   * @param other The existing instance to copy.
   * @return A new MenuItem RecordBuilder
   */
  public static com.example.test1.entity.MenuItem.Builder newBuilder(com.example.test1.entity.MenuItem other) {
    if (other == null) {
      return new com.example.test1.entity.MenuItem.Builder();
    } else {
      return new com.example.test1.entity.MenuItem.Builder(other);
    }
  }

  /**
   * RecordBuilder for MenuItem instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MenuItem>
    implements org.apache.avro.data.RecordBuilder<MenuItem> {

    private int menu_id;
    private java.lang.String menu_name;
    private int unit_price;
    private int quantity;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.test1.entity.MenuItem.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.menu_id)) {
        this.menu_id = data().deepCopy(fields()[0].schema(), other.menu_id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.menu_name)) {
        this.menu_name = data().deepCopy(fields()[1].schema(), other.menu_name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.unit_price)) {
        this.unit_price = data().deepCopy(fields()[2].schema(), other.unit_price);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.quantity)) {
        this.quantity = data().deepCopy(fields()[3].schema(), other.quantity);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing MenuItem instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.test1.entity.MenuItem other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.menu_id)) {
        this.menu_id = data().deepCopy(fields()[0].schema(), other.menu_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.menu_name)) {
        this.menu_name = data().deepCopy(fields()[1].schema(), other.menu_name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.unit_price)) {
        this.unit_price = data().deepCopy(fields()[2].schema(), other.unit_price);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.quantity)) {
        this.quantity = data().deepCopy(fields()[3].schema(), other.quantity);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'menu_id' field.
      * @return The value.
      */
    public int getMenuId() {
      return menu_id;
    }


    /**
      * Sets the value of the 'menu_id' field.
      * @param value The value of 'menu_id'.
      * @return This builder.
      */
    public com.example.test1.entity.MenuItem.Builder setMenuId(int value) {
      validate(fields()[0], value);
      this.menu_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'menu_id' field has been set.
      * @return True if the 'menu_id' field has been set, false otherwise.
      */
    public boolean hasMenuId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'menu_id' field.
      * @return This builder.
      */
    public com.example.test1.entity.MenuItem.Builder clearMenuId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'menu_name' field.
      * @return The value.
      */
    public java.lang.String getMenuName() {
      return menu_name;
    }


    /**
      * Sets the value of the 'menu_name' field.
      * @param value The value of 'menu_name'.
      * @return This builder.
      */
    public com.example.test1.entity.MenuItem.Builder setMenuName(java.lang.String value) {
      validate(fields()[1], value);
      this.menu_name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'menu_name' field has been set.
      * @return True if the 'menu_name' field has been set, false otherwise.
      */
    public boolean hasMenuName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'menu_name' field.
      * @return This builder.
      */
    public com.example.test1.entity.MenuItem.Builder clearMenuName() {
      menu_name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'unit_price' field.
      * @return The value.
      */
    public int getUnitPrice() {
      return unit_price;
    }


    /**
      * Sets the value of the 'unit_price' field.
      * @param value The value of 'unit_price'.
      * @return This builder.
      */
    public com.example.test1.entity.MenuItem.Builder setUnitPrice(int value) {
      validate(fields()[2], value);
      this.unit_price = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'unit_price' field has been set.
      * @return True if the 'unit_price' field has been set, false otherwise.
      */
    public boolean hasUnitPrice() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'unit_price' field.
      * @return This builder.
      */
    public com.example.test1.entity.MenuItem.Builder clearUnitPrice() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantity' field.
      * @return The value.
      */
    public int getQuantity() {
      return quantity;
    }


    /**
      * Sets the value of the 'quantity' field.
      * @param value The value of 'quantity'.
      * @return This builder.
      */
    public com.example.test1.entity.MenuItem.Builder setQuantity(int value) {
      validate(fields()[3], value);
      this.quantity = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'quantity' field has been set.
      * @return True if the 'quantity' field has been set, false otherwise.
      */
    public boolean hasQuantity() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'quantity' field.
      * @return This builder.
      */
    public com.example.test1.entity.MenuItem.Builder clearQuantity() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MenuItem build() {
      try {
        MenuItem record = new MenuItem();
        record.menu_id = fieldSetFlags()[0] ? this.menu_id : (java.lang.Integer) defaultValue(fields()[0]);
        record.menu_name = fieldSetFlags()[1] ? this.menu_name : (java.lang.String) defaultValue(fields()[1]);
        record.unit_price = fieldSetFlags()[2] ? this.unit_price : (java.lang.Integer) defaultValue(fields()[2]);
        record.quantity = fieldSetFlags()[3] ? this.quantity : (java.lang.Integer) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MenuItem>
    WRITER$ = (org.apache.avro.io.DatumWriter<MenuItem>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MenuItem>
    READER$ = (org.apache.avro.io.DatumReader<MenuItem>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.menu_id);

    out.writeString(this.menu_name);

    out.writeInt(this.unit_price);

    out.writeInt(this.quantity);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.menu_id = in.readInt();

      this.menu_name = in.readString();

      this.unit_price = in.readInt();

      this.quantity = in.readInt();

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.menu_id = in.readInt();
          break;

        case 1:
          this.menu_name = in.readString();
          break;

        case 2:
          this.unit_price = in.readInt();
          break;

        case 3:
          this.quantity = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










